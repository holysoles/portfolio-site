title: "Arduino Heater Controller"
date: "1/6/2020"
body: 
  - text: "Since the cold has rolled in the past weeks, I've been running the space heater in my bedroom, but the heater's temperature control is horrible. It consistently overheats and underheats the set temperature, which I would assume either comes from a cheap temperature sensor or the fact the sensor is located directly next to the heating element, so I finally decided to do something about it."
  - section_title: "The Plan"
    text: "To use a microcontroller to monitor the room's temperature, then trigger temperature changes on the heater or shut it off using infrared signals, spoofed from the original remote."
  - section_title: "BOM"
  - text: "- Arduino Mini (only used this specifically since I had a spare)"
  - text: "- DHT11/22 Temperature Sensor"
  - text: "- Infrared LED"
  - text: "- Infrared Sensor (For capturing codes only)"
  - text: "- 2222N NPN BJT"
  - text: "- HC-05 Bluetooth Module"
  - text: "- 2x 470k Ohm Resistors"
  - text: "- Hookup Wire to use as jumpers on the board"
  - text: "- 5V Power Supply (Minimum 0.5A)"
  - text: "- PCB Proto-board/Breadboard"
  - section_title: "Hardware"
    text: "First I organized then soldered everything on the board. The NPN transistor is used so that the IR LED can be powered with 5V, which gives a stronger signal, rather than from the Arduino. The BT module will be used for external commands from my Raspberry Pi over the serial port. I tried to space the DHT sensor as far as possible from the Arduino and the BJT to prevent heat interference. With all that done, let's move onto the software!"
  - image: "arduino_temp_control_1.jpg"
  - image: "arduino_temp_control_2.jpg"
  - section_title: "Software"
    text: "I knew I needed a few libraries before I began to code so I added them through the Arduino IDE library manager:"
  - text: "- DHT.h: Interfacing with the DHT sensor (very straightforward to use with either DHT11/22)"
  - text: "- IRremote.h: Very helpful IR library for spoofing IR commands"
  - text: "- AdafruitSleepyDog.h: Library for sleeping with the watchdog timer"
  - text: "- SoftwareSerial.h: Using digital pins as serial tx/rx pins"
  - text: "The AdafruitSleepyDog library is very helpful for projects where low power is a concern, since power-down sleep function included on atmega328p chips is very low power and is able to be woken up by the watchdog timer (can be compared to other sleep modes on the 328ps datasheet). Even though I wanted to use a power supply with this project, I wanted the flexibility to use a battery, as well as attempting to lower power consumption if it was going to be plugged in all the time. The watchdog timer can only run for 8 seconds, a loop was necessary for it to sleep for 2-3 minutes as planned."
  - text: "The IRremote.h library was the backbone for the implementation of this project, as my space heater has a simple IR remote paired with it. I was able to spoof the remotes commands by using an IR sensor and reading the raw bytes, as well as the hex data of each button's signal. Luckily, the remote uses the NEC IR Protocol, which is included in the library. This means I can send the hex data, instead of the raw data with bursts/spaces."
  - text: "I used the SoftwareSerial library to add a HC-05 Bluetooth module to the remote. This will be used to read the serial port on every wake cycle, looking for a string sent by my Raspberry Pi, which will be read as chars to execute specific commands. I did this so I can use a python script on the Raspberry Pi to interface with the Arduino. The HC-05 is constantly paired to the Pi and can be repaired if disconnected by running a Python script. The commands that the Pi sends over include power on/off, changing the set temperature, and setting a timer. The temperature is automatically lowered at night and raised during the day by adding two python scripts to crontab, executing at 8:00AM and 11:30PM respectively."
  - section_title: "Wrap Up"
    text: "After putting this remote into use for a few days and debugging, I realized the DHT11 Temperature sensor with an error range of +/-2.0 degrees C is too high for room temperature control. After replacing the sensor with a DHT22 (same pinout and minor code changes) the remote works as expected and my bedroom's temperature is much more consistent!"
  - text: "The Arduino code as well as the python scripts can be found on my Github!"